{"version":3,"sources":["components/ChapterDetailsForm.js","actions/api.js","actions/postContact.js","components/useForm.js","components/PostContactForm.js","components/PostContact.js","reducers/postContact.js","reducers/index.js","actions/store.js","components/comp/sidemenu.js","components/comp/header.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","modal","display","alignItems","justifyContent","overflow","marginTop","marginBottom","paperInput","padding","margin","width","text","connect","state","postContactList","postContact","list","props","useState","chaterOp","setChapterOp","inivalue","value","setvalue","classes","useEffect","chaterId","y","find","x","_id","console","log","Modal","open","onClose","setChapterId","className","Paper","TableContainer","component","table","Table","arial-label","TableHead","TableRow","TableCell","align","TableBody","map","name","index","length","url","fetchAll","axios","get","fetchById","id","create","newContact","post","update","updateContact","put","delete","ACTION_TYPES","useForm","initialFieldValues","setCurrentId","values","setValues","errors","setErrors","openIn","setOpenIn","textin","settextin","btn","setbtn","changeHandler","e","target","resetForm","phone","email","address","mapActionToProps","createPostContacts","data","onSuccess","dispatch","api","then","res","type","payload","catch","err","updatePostContact","currentId","autoComplete","noValidate","onSubmit","preventDefault","ButterToast","raise","content","Crisp","title","scheme","Cinnamon","SCHEME_PURPLE","icon","temp","Object","every","validate","Typography","varient","TextField","variant","label","autoFocus","onChange","error","helperText","fullWidth","multiline","rows","Grid","container","item","xs","Button","color","elevation","style","onClick","require","fetchAllPostContacts","deletePostContact","withStyles","theme","contact","key","ChapterName","City","Area","ChapterDetails","MeetDay","size","initialState","reducers","combineReducers","action","filter","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","sidemenu","flexDirection","position","left","backgroundColor","height","boxShadow","root","Header","AppBar","Toolbar","fontSize","paddingTop","IconButton","Badge","badgeContent","App","Container","maxWidth","vertical","POS_TOP","horizontal","POS_RIGHT","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6bAMMA,EAAYC,aAAW,iBAAO,CAChCC,MAAO,CACHC,QAAS,OACTC,WAAY,MACZC,eAAgB,SAChBC,SAAU,OACVC,UAAU,KACVC,aAAa,SAEjBC,WAAW,CACPC,QAAQ,OACRC,OAAO,OACPC,MAAM,OAEVC,KAAK,CACDF,OAAO,cAsHAG,eANS,SAAAC,GAAK,MAAK,CAC9BC,gBAAiBD,EAAME,YAAYC,QAKxBJ,EA/GY,SAACK,GAAW,IAAD,EACFC,oBAAS,GADP,mBAC3BC,EAD2B,KAClBC,EADkB,KAE5BC,EAAW,CACb,MAAQ,GACR,QAAU,GACV,WAAa,GACb,gBAAgB,GAChB,eAAe,GACf,wBAAwB,GACxB,MAAQ,GACR,OAAS,GACT,QAAU,IAXoB,EAcTH,mBAASG,GAdA,mBAc3BC,EAd2B,KAcrBC,EAdqB,KAe5BC,EAAU1B,EAAU,IAe1B,OAdA2B,qBAAU,WACN,GAAuB,IAAnBR,EAAMS,SAAe,CACrBN,GAAa,GACb,IAAIO,EAAIV,EAAMH,gBAAgBc,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAQb,EAAMS,YAAhD,eACRH,EACII,GAEJI,QAAQC,IAAIV,MAIjB,CAACL,EAAMS,WAKF,kBAACO,EAAA,EAAD,CACAC,KAAMf,EACNgB,QAAS,WACLf,GAAa,GACbH,EAAMmB,aAAa,GACnBb,EAASF,IAEbgB,UAAWb,EAAQxB,OACvB,kBAACsC,EAAA,EAAD,CAAOD,UAAWb,EAAQjB,YACtB,4BACCe,EAAM,iBAEP,2BACCA,EAAM,0BAEP,2BACCA,EAAK,OAEN,2BACCA,EAAK,QAEN,2BACCA,EAAK,SAEN,kBAACiB,EAAA,EAAD,CAAgBC,UAAWF,IAAOD,UAAWb,EAAQiB,OACrD,kBAACC,EAAA,EAAD,CAAOC,cAAY,gBACf,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,oBAGA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,WAGA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,cAGA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,mBAKR,kBAACC,EAAA,EAAD,KACK1B,EAAK,MAAU2B,KAAI,SAACC,EAAKC,GAAN,OACZ,kBAACN,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACKI,GAEL,kBAACJ,EAAA,EAAD,CAAWC,MAAM,SACZzB,EAAK,QAAY6B,IAEtB,kBAACL,EAAA,EAAD,CAAWC,MAAM,SACZzB,EAAK,WAAe6B,IAEzB,kBAACL,EAAA,EAAD,CAAWC,MAAM,SACZzB,EAAM,iBAAiB6B,GAAO7B,EAAM,iBAAiB8B,OAAO9B,EAAK,QAAY8B,sB,iBChH/F,aACgC,IAA9BC,EAA6B,uDAAf,eACvB,MAAO,CACHC,SAAU,kBAAMC,IAAMC,IAAIH,IAC1BI,UAAW,SAAAC,GAAE,OAAIH,IAAMC,IAAIH,EAAIK,IAC/BC,OAAQ,SAAAC,GAAU,OAAIL,IAAMM,KAAKR,EAAIO,IACrCE,OAAQ,SAACJ,EAAGK,GAAJ,OAAsBR,IAAMS,IAAIX,EAAIK,EAAGK,IAC/CE,OAAQ,SAAAP,GAAE,OAAIH,IAAMU,OAAOZ,EAAIK,MCR9BQ,EACF,SADEA,EAEF,SAFEA,EAGF,SAHEA,EAIC,Y,2CCkCCC,EAtCC,SAACC,EAAmBC,GAAkB,IAAD,EACtBnD,mBAASkD,GADa,mBAC1CE,EAD0C,KACnCC,EADmC,OAEtBrD,mBAAS,IAFa,mBAE1CsD,EAF0C,KAEnCC,EAFmC,OAGtBvD,oBAAS,GAHa,mBAG1CwD,EAH0C,KAGnCC,EAHmC,OAItBzD,mBAAS,sBAJa,mBAI1C0D,EAJ0C,KAInCC,EAJmC,OAK5B3D,mBAAS,QALmB,mBAK1C4D,EAL0C,KAKtCC,EALsC,KAyBjD,MAAO,CACHP,SACAC,YACAH,SACAC,YACAS,cArBkB,SAAAC,GAAM,IAAD,EACFA,EAAEC,OAAhBhC,EADgB,EAChBA,KAAK5B,EADW,EACXA,MACZiD,EAAU,2BACHD,GADE,kBAEJpB,EAAM5B,MAkBXoD,SACAC,YACAQ,UAhBa,WACbZ,EAAUH,GACVK,EAAU,IACVE,GAAU,GACVE,EAAU,sBACVR,EAAa,GACbU,EAAO,SAUGH,SAAOC,YAAUC,MAAIC,W,mCCzBjCjF,EAAYC,aAAW,iBAAO,CAChCC,MAAO,CACHC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAEpBI,WAAW,CACPC,QAAQ,OACRC,OAAO,OACPC,MAAM,SAEVC,KAAK,CACDF,OAAO,cAMT2D,EAAmB,CACrBlB,KAAK,GACLkC,MAAM,GACNC,MAAM,GACNC,QAAQ,IAuKNC,EAAmB,CACtBC,mBF9KkB,SAACC,EAAKC,GAAN,OAAoB,SAAAC,GACrCC,IAAkBjC,OAAO8B,GACxBI,MAAK,SAAAC,GACFH,EAAS,CACLI,KAAK7B,EACL8B,QAAQF,EAAIL,OAEhBC,OAEEO,OAAO,SAAAC,GAAG,OAAInE,QAAQC,IAAIkE,QEsKjCC,kBFnKkB,SAACzC,EAAG+B,EAAKC,GAAT,OAAuB,SAAAC,GACxCC,IAAkB9B,OAAOJ,EAAG+B,GAC3BI,MAAK,SAAAC,GACFH,EAAS,CACLI,KAAK7B,EACL8B,QAAQF,EAAIL,OAEhBC,OAEEO,OAAO,SAAAC,GAAG,OAAInE,QAAQC,IAAIkE,SG2E9BX,GDkFS3E,aATS,SAAAC,GAAK,MAAK,CAC9BC,gBAAiBD,EAAME,YAAYC,QAQCuE,EAAzB3E,EAzKS,SAACK,GAIrB,IAAMO,EAAU1B,IAJe,EA6B3BqE,EAAQC,EAAmBnD,EAAMoD,cARjCG,EArB2B,EAqB3BA,OACAC,EAtB2B,EAsB3BA,UACAH,EAvB2B,EAuB3BA,OACAC,EAxB2B,EAwB3BA,UACAS,EAzB2B,EAyB3BA,cACAN,EA1B2B,EA0B3BA,OACAC,EA3B2B,EA2B3BA,UACAQ,EA5B2B,EA4B3BA,UAAUP,EA5BiB,EA4BjBA,OAAOC,EA5BU,EA4BVA,UAAUC,EA5BA,EA4BAA,IAAIC,EA5BJ,EA4BIA,OAGnCtD,qBAAU,WACkB,IAApBR,EAAMmF,YACNzB,GAAU,GACVJ,EAAU,eACHtD,EAAMH,gBAAgBc,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAQb,EAAMmF,eAEvD3B,EAAU,IACVI,EAAU,kBACVE,EAAO,aAGZ,CAAC9D,EAAMmF,YAgCV,OACI,6BACI,kBAACnE,EAAA,EAAD,CACAC,KAAMwC,EACNvC,QAAS,kBAAMgD,KACf9C,UAAWb,EAAQxB,OACvB,kBAACsC,EAAA,EAAD,CAAOD,UAAWb,EAAQjB,YAC1B,0BAAM8F,aAAa,KAAKC,YAAU,EAClCC,SArCkB,SAAAtB,GAElBA,EAAEuB,iBACF,IAAMd,EAAY,WACde,IAAYC,MAAM,CACdC,QAAQ,kBAAC,WAASC,MAAV,CAAgBC,MAAOvC,EAAOpB,KACtCyD,QAAQ,qBACRG,OAAUC,WAASH,MAAMI,cACzBC,KAAM,kBAAC,IAAD,UAIV9B,MAnDK,WACb,IAAI+B,EAAI,eAAO1C,GAOf,OANA0C,EAAKhE,KAAOoB,EAAOpB,KAAK,GAAG,yBAC3BgE,EAAK9B,MAAQd,EAAOc,MAAM,GAAG,yBAC7B8B,EAAK7B,MAAQf,EAAOe,MAAM,GAAG,yBAC7BZ,EAAU,eACHyC,IAEAC,OAAO7C,OAAO4C,GAAME,OAAM,SAAAvF,GAAC,MAAQ,KAAJA,MAgD/BwF,KACwB,IAApBpG,EAAMmF,UACTnF,EAAMuE,mBAAmBlB,EAAOoB,GAG5BzE,EAAMkF,kBAAkBlF,EAAMmF,UAAW9B,EAAQoB,MAkBrD,kBAAC4B,EAAA,EAAD,CACAC,QAAQ,MACH3C,GAGL,kBAAC4C,EAAA,EAAD,eAAWtE,KAAK,OAChBuE,QAAQ,WACRC,MAAM,OACNC,WAAS,EACTtF,UAAWb,EAAQb,KACnBW,MAAOgD,EAAOpB,KACd0E,SAAU5C,GACLR,EAAOtB,MAAQ,CAAC2E,OAAM,EAAKC,WAAWtD,EAAOtB,MAPlD,CAQA6E,WAAS,KAET,kBAACP,EAAA,EAAD,eAAWtE,KAAK,QAChBuE,QAAQ,WACRC,MAAM,eACNrF,UAAWb,EAAQb,KACnBW,MAAOgD,EAAOc,MACdwC,SAAU5C,GACLR,EAAOY,OAAS,CAACyC,OAAM,EAAKC,WAAWtD,EAAOY,OANnD,CAOA2C,WAAS,KAET,kBAACP,EAAA,EAAD,eAAWtE,KAAK,QAChBuE,QAAQ,WACRC,MAAM,QACNrF,UAAWb,EAAQb,KACnBW,MAAOgD,EAAOe,MACduC,SAAU5C,GACLR,EAAOa,OAAS,CAACwC,OAAM,EAAKC,WAAWtD,EAAOa,OANnD,CAOA0C,WAAS,KAET,kBAACP,EAAA,EAAD,CAAWtE,KAAK,UAChBuE,QAAQ,WACRC,MAAM,UACNM,WAAS,EACTC,KAAM,EACN5F,UAAWb,EAAQb,KACnBW,MAAOgD,EAAOgB,QACdsC,SAAU5C,EACV+C,WAAS,IACT,kBAACG,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,IACb,kBAACH,EAAA,EAAD,CAAME,MAAI,GACV,kBAACE,EAAA,EAAD,CACJb,QAAQ,YAAYc,MAAM,UAC1BxC,KAAK,UACHjB,QASN,kBAACxC,EAAA,EAAD,CAAOkG,UAAW,EAAGC,MAAO,CAACpI,UAAU,SACnC,kBAAC6H,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,IACb,kBAACH,EAAA,EAAD,CAAME,MAAI,GACV,kBAACE,EAAA,EAAD,CACAb,QAAQ,WACRiB,QAAS,kBAAM/D,GAAU,KAFzB,0B,cC1KEgE,EAAQ,KA+GD,CACrBC,qBHnHwB,WACpB,OACI,SAAAjD,GACIC,IAAkBtC,WACjBuC,MAAK,SAAAC,GAEFH,EAAS,CACLI,KAAK7B,EACL8B,QAAQF,EAAIL,UAGnBQ,OAAM,SAAAC,GAAG,OAAInE,QAAQC,IAAIkE,QGyGtC2C,kBHxEiB,SAACnF,EAAGgC,GAAJ,OAAkB,SAAAC,GACnCC,IAAkB3B,OAAOP,GACxBmC,MAAK,SAAAC,GACFH,EAAS,CACLI,KAAK7B,EACL8B,QAAQtC,IAEZgC,OAEEO,OAAO,SAAAC,GAAG,OAAInE,QAAQC,IAAIkE,UGkErBtF,eATS,SAAAC,GAAK,MAAK,CAC7BC,gBAAiBD,EAAME,YAAYC,QAQAuE,EAAzB3E,CAA2CkI,aAjH3C,SAAAC,GAAK,MAAK,CACrBtG,MAAM,CACFhC,OAAO,aA+G2CqI,EA1GtC,SAAC,GAAyB,IAAxBtH,EAAuB,EAAvBA,QAAYP,EAAW,6BACRC,mBAAS,GADD,gCAGTA,mBAAS,IAHA,mBAGlCQ,EAHkC,KAGzBU,EAHyB,KA4BzC,OAHAX,qBAAU,WACNR,EAAM2H,yBACR,IAEF,kBAAC,WAAD,KAGI,kBAAC,EAAuB,CAAClH,WAASU,iBAClC,kBAACG,EAAA,EAAD,CAAgBC,UAAWF,IAAOD,UAAWb,EAAQiB,OACjD,kBAACC,EAAA,EAAD,CAAOC,cAAY,gBACf,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,qBAGA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,QAGA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,QAGA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,eAGA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,aAKR,kBAACC,EAAA,EAAD,KAGI/B,EAAMH,gBAAgBmC,KAAI,SAAC+F,EAAQ7F,GAAT,OACtB,kBAACN,EAAA,EAAD,CAAUoG,IAAK9F,GACX,kBAACL,EAAA,EAAD,KACKkG,EAAQE,aAEb,kBAACpG,EAAA,EAAD,CAAWC,MAAM,SAEZiG,EAAQG,MAEb,kBAACrG,EAAA,EAAD,CAAWC,MAAM,SACZiG,EAAQI,KACRrH,QAAQC,WAAWgH,EAAQK,iBAEhC,kBAACvG,EAAA,EAAD,CAAWC,MAAM,SACZiG,EAAQM,SAEb,kBAACxG,EAAA,EAAD,CAAWC,MAAM,SACb,kBAACuF,EAAA,EAAD,CAAQb,QAAQ,WAAWc,MAAM,YAAagB,KAAK,QACnDb,QAAW,kBAtEfhF,EAsEoCsF,EAAQlH,IArEhEM,EAAasB,QACb3B,QAAQC,IAAI0B,GAFO,IAACA,IAqEI,0B,yBC7F1B8F,EAAe,CACjBxI,KAAK,ICAIyI,EAAWC,YAAgB,CACpC3I,YDEuB,WAAoC,IAAnCF,EAAkC,uDAA1B2I,EAAeG,EAAW,uCAC1D,OAAQA,EAAO5D,MACX,KAAK7B,EACD,OAAO,2BACArD,GADP,IAEIG,KAAK,YAAI2I,EAAO3D,WAGpB,KAAK9B,EACD,OAAO,2BACArD,GADP,IAEIG,KAAK,GAAD,mBAAMH,EAAMG,MAAZ,CAAkB2I,EAAO3D,YAErC,KAAK9B,EACD,OAAO,2BACArD,GADP,IAEIG,KAAMH,EAAMG,KAAKiC,KAAI,SAAApB,GAAC,OAAIA,EAAEC,MAAQ6H,EAAO3D,QAAQlE,IAAM6H,EAAO3D,QAAUnE,OAGlF,KAAKqC,EACD,OAAO,2BACArD,GADP,IAEIG,KAAKH,EAAMG,KAAK4I,QAAO,SAAA/H,GAAC,OAAIA,EAAEC,MAAQ6H,EAAO3D,aAIzD,QACI,OAAOnF,ME7BNgJ,EAAQC,YACjBL,EACAM,YAAQC,YAAgBC,KACxBC,OAAOC,8BAAgCD,OAAOC,iCCkBnCrB,cArBD,CACVsB,SAAS,CACDnK,QAAQ,OACRoK,cAAc,SACdC,SAAS,QACTC,KAAK,IACL7J,MAAM,OACN8J,gBAAgB,UAChBC,OAAO,OACPC,UAAU,2BAYP5B,EARG,SAAC7H,GAAW,IAClBO,EAAWP,EAAXO,QAER,OAAQ,yBAAKa,UAAWb,EAAQ4I,c,+GCb9BtK,GAAYC,YAAW,CACzB4K,KAAK,CACDH,gBAAgB,UAKT,SAASI,KACpB,IAAMpJ,EAAU1B,KAChB,OACI,kBAAC,WAAD,KACI,kBAAC+K,EAAA,EAAD,CAAQP,SAAS,SAASjI,UAAWb,EAAQmJ,MACzC,kBAACG,GAAA,EAAD,KACI,kBAAC5C,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,GACN,kBAACF,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,GACV,kBAAC,KAAD,CAAYK,MAAO,CAACF,MAAM,UAAU9H,OAAO,iBAAkBsK,SAAS,WAEtE,kBAAC7C,EAAA,EAAD,CAAME,MAAI,GACV,wBAAIK,MAAO,CAACF,MAAM,YAAlB,eAMR,kBAACL,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,IAEb,kBAACH,EAAA,EAAD,CAAME,MAAI,EAACK,MAAO,CAACuC,WAAW,QAC1B,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOC,aAAc,EAAG5C,MAAM,aAC1B,kBAAC,KAAD,QAGR,kBAAC0C,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOC,aAAc,EAAG5C,MAAM,aAC1B,kBAAC,KAAD,aCfrB6C,OAhBf,WAEE,OACE,kBAAC,IAAD,CAAUvB,MAAOA,GACb,kBAAC,EAAD,MACA,kBAACwB,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACV,GAAD,MAED,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAaN,SAAU,CAACiB,SAASC,UAAQC,WAAWC,kBCTzCC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzG,MAAK,SAAA0G,GACJA,EAAaC,gBAEdvG,OAAM,SAAA4B,GACL9F,QAAQ8F,MAAMA,EAAM4E,c","file":"static/js/main.1e12604d.chunk.js","sourcesContent":["import { Table ,TableCell,TableContainer, TableHead, TableRow, TableBody, makeStyles, Modal, Paper,} from '@material-ui/core';\r\nimport React, { useEffect,useState } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'top',\r\n        justifyContent: 'center',\r\n        overflow: 'auto',\r\n        marginTop:'4%',\r\n        marginBottom:'0.75%',\r\n      },\r\n    paperInput:{\r\n        padding:'25px',\r\n        margin:'20px',\r\n        width:\"90%\"\r\n    },\r\n    text:{\r\n        margin:\"10px 0\"\r\n    }\r\n  }\r\n  \r\n  ));\r\n//   chaterId,setChapterId,setChapterOpen,chaterOpen\r\n\r\nconst ChapterDetailsForm = (props) => {\r\n    const [chaterOp,setChapterOp] = useState(false)\r\n    const inivalue = {\r\n        \"Names\":[],\r\n        \"Company\":[],\r\n        \"Profession\":[],\r\n        'Mobile Number':[],\r\n        'Meeting Name':'',\r\n        'Metting date and Time':\"\",\r\n        'Venue':\"\",\r\n        'Mobile':\"\",\r\n        'Address':[],\r\n\r\n    }\r\n    const [value,setvalue] = useState(inivalue)\r\n    const classes = useStyles({});\r\n    useEffect(() => {\r\n        if (props.chaterId !== 0){\r\n            setChapterOp(true)\r\n            var y = props.postContactList.find(x => x._id === props.chaterId)['ChapterDetails']\r\n            setvalue(\r\n                y\r\n            )\r\n            console.log(value)\r\n            // console.log(props)\r\n            \r\n        }\r\n    }, [props.chaterId])\r\n\r\n\r\n    return (\r\n        \r\n            <Modal\r\n            open={chaterOp}\r\n            onClose={() => {\r\n                setChapterOp(false)\r\n                props.setChapterId(0)\r\n                setvalue(inivalue)\r\n            }} \r\n            className={classes.modal}>\r\n        <Paper className={classes.paperInput}>\r\n            <h2>\r\n            {value['Meeting Name']}\r\n            </h2>\r\n            <p>\r\n            {value['Metting date and Time']}\r\n            </p>\r\n            <p>\r\n            {value['Venue']}\r\n            </p>\r\n            <p>\r\n            {value['Mobile']}\r\n            </p>\r\n            <p>\r\n            {value['Address']}\r\n            </p>\r\n            <TableContainer component={Paper} className={classes.table}>\r\n            <Table arial-label='simple table' >\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                               Member Name\r\n                        </TableCell>\r\n                        <TableCell align='right'>\r\n                            Company\r\n                        </TableCell>\r\n                        <TableCell align='right'>\r\n                           Profession\r\n                        </TableCell>\r\n                        <TableCell align='right'>\r\n                            Mobile Number\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {value['Names'].map((name,index) => (\r\n                            <TableRow > \r\n                            <TableCell>\r\n                                {name}\r\n                            </TableCell>\r\n                            <TableCell align='right'>\r\n                                {value['Company'][index]}\r\n                            </TableCell>\r\n                            <TableCell align='right'>\r\n                                {value['Profession'][index]}\r\n                            </TableCell>\r\n                            <TableCell align='right'>\r\n                                {value['Mobile Number'][index+(value['Mobile Number'].length-value['Company'].length)]}\r\n                            </TableCell>\r\n\r\n                            </TableRow>\r\n                        ))\r\n                    }\r\n                    \r\n                   \r\n                </TableBody>\r\n\r\n            </Table>\r\n\r\n        </TableContainer>\r\n           \r\n        </Paper>\r\n        </Modal>        \r\n    )\r\n}\r\nconst mapStateToProps = state =>( {\r\n    postContactList: state.postContact.list\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(ChapterDetailsForm);\r\n\r\n","import axios from 'axios';\r\nconst baseUrl = ''\r\n\r\nexport default {\r\n    postContact (url = baseUrl+'postContact/'){\r\n        return {\r\n            fetchAll: () => axios.get(url),\r\n            fetchById: id => axios.get(url+id),\r\n            create: newContact => axios.post(url,newContact),\r\n            update: (id,updateContact) => axios.put(url+id,updateContact),\r\n            delete: id => axios.delete(url+id)\r\n        }\r\n    }\r\n}","import api from './api';\r\n\r\nexport const ACTION_TYPES = {\r\n    CREATE:'CREATE',\r\n    UPDATE:'UPDATE',\r\n    DELETE:'DELETE',\r\n    FETCH_ALL:'FETCH_ALL'}\r\n\r\n    export const fetchAll = () => {\r\n        return( \r\n            dispatch => {\r\n                api.postContact().fetchAll()\r\n                .then(res => {\r\n                    // console.log(res)\r\n                    dispatch({\r\n                        type:ACTION_TYPES.FETCH_ALL,\r\n                        payload:res.data\r\n                    })\r\n                })\r\n                .catch(err => console.log(err))\r\n                \r\n            }\r\n        )\r\n    }\r\n\r\n\r\nexport const create =(data,onSuccess) => dispatch => {\r\n    api.postContact().create(data)\r\n    .then(res => {\r\n        dispatch({\r\n            type:ACTION_TYPES.CREATE,\r\n            payload:res.data\r\n        })\r\n        onSuccess()\r\n    }\r\n        ).catch (err => console.log(err))\r\n}\r\n\r\nexport const update =(id,data,onSuccess) => dispatch => {\r\n    api.postContact().update(id,data)\r\n    .then(res => {\r\n        dispatch({\r\n            type:ACTION_TYPES.UPDATE,\r\n            payload:res.data\r\n        }) \r\n        onSuccess()\r\n    }\r\n        ).catch (err => console.log(err))\r\n}\r\n\r\n\r\n\r\nexport const Delete =(id,onSuccess) => dispatch => {\r\n    api.postContact().delete(id)\r\n    .then(res => {\r\n        dispatch({\r\n            type:ACTION_TYPES.DELETE,\r\n            payload:id\r\n        }) \r\n        onSuccess()\r\n    }\r\n        ).catch (err => console.log(err))\r\n}","import  { useState } from 'react';\r\n\r\nconst useForm = (initialFieldValues,setCurrentId) => {\r\n    const [values,setValues] = useState(initialFieldValues)\r\n    const [errors,setErrors] = useState({})\r\n    const [openIn,setOpenIn] = useState(false)\r\n    const [textin,settextin] = useState('Create new Contact')\r\n    const [btn,setbtn] = useState(\"Save\")\r\n    \r\n  \r\n    \r\n    const changeHandler = e => {\r\n        const {name,value} = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]:value}\r\n        )\r\n        // console.log(values)\r\n    }\r\n    const resetForm =() =>{\r\n        setValues(initialFieldValues)\r\n        setErrors({})\r\n        setOpenIn(false)\r\n        settextin('Create new Contact')\r\n        setCurrentId(0)\r\n        setbtn('Save')\r\n    }\r\n    return {\r\n        errors,\r\n        setErrors,\r\n        values,\r\n        setValues,\r\n        changeHandler,\r\n        openIn,\r\n        setOpenIn,\r\n        resetForm,textin,settextin,btn,setbtn\r\n\r\n    }\r\n}\r\n\r\nexport default useForm;","import { Button, Grid, makeStyles, Modal, Paper, TextField,Typography } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport useForm from './useForm';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions/postContact';\r\nimport ButterToast, { Cinnamon } from \"butter-toast\";\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n    paperInput:{\r\n        padding:'25px',\r\n        margin:'20px',\r\n        width:\"400px\"\r\n    },\r\n    text:{\r\n        margin:\"10px 0\"\r\n    }\r\n  }\r\n  \r\n  ));\r\n\r\nconst initialFieldValues={\r\n    name:\"\",\r\n    phone:\"\",\r\n    email:\"\",\r\n    address:\"\"\r\n}\r\n\r\nconst PostContactForm = (props) => {\r\n\r\n   \r\n\r\n    const classes = useStyles();\r\n\r\nconst validate = () => {\r\n    let temp = {...errors}\r\n    temp.name = values.name?\"\":\"This Field is Required\"\r\n    temp.phone = values.phone?\"\":\"This Field is Required\"\r\n    temp.email = values.email?\"\":\"This Field is Required\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n    return Object.values(temp).every(x => x===\"\")\r\n    \r\n}\r\n\r\n\r\n\r\n    var {\r\n        errors,\r\n        setErrors,\r\n        values,\r\n        setValues,\r\n        changeHandler,\r\n        openIn,\r\n        setOpenIn,\r\n        resetForm,textin,settextin,btn,setbtn\r\n    } = useForm(initialFieldValues,props.setCurrentId);\r\n\r\n    useEffect(() => {\r\n        if (props.currentId !== 0){\r\n            setOpenIn(true)\r\n            setValues({\r\n                ...props.postContactList.find(x => x._id === props.currentId)\r\n            })\r\n            setErrors({})\r\n            settextin(\"Update Contact\")\r\n            setbtn(\"Update\")\r\n            \r\n        }\r\n    }, [props.currentId])\r\n\r\n\r\n    const submitHandler = e =>{\r\n        \r\n        e.preventDefault()\r\n        const onSuccess = () => {\r\n            ButterToast.raise({\r\n                content:<Cinnamon.Crisp title={values.name}\r\n                content=\"Successfully Saved\"\r\n                scheme = {Cinnamon.Crisp.SCHEME_PURPLE }\r\n                icon={<DoneIcon />}\r\n                />\r\n\r\n            })\r\n            resetForm()\r\n          \r\n            \r\n            \r\n        }\r\n        if(validate()){\r\n            if(props.currentId === 0){\r\n            props.createPostContacts(values,onSuccess) \r\n            }   \r\n            else{\r\n                props.updatePostContact(props.currentId, values, onSuccess)\r\n                \r\n            }\r\n        }\r\n        \r\n    }\r\n     \r\n    return (\r\n        <div>\r\n            <Modal\r\n            open={openIn}\r\n            onClose={() => resetForm()} \r\n            className={classes.modal}>\r\n        <Paper className={classes.paperInput}>\r\n        <form autoComplete=\"on\" noValidate\r\n        onSubmit={submitHandler}\r\n        >\r\n            \r\n            <Typography\r\n            varient=\"h4\" >\r\n                {textin}\r\n            </Typography>\r\n\r\n            <TextField name=\"name\"\r\n            variant=\"outlined\"\r\n            label=\"Name\"\r\n            autoFocus\r\n            className={classes.text}\r\n            value={values.name}\r\n            onChange={changeHandler}\r\n            {...(errors.name && {error:true,helperText:errors.name})}\r\n            fullWidth></TextField>\r\n\r\n            <TextField name=\"phone\"\r\n            variant=\"outlined\"\r\n            label=\"Phone Number\"\r\n            className={classes.text}\r\n            value={values.phone}\r\n            onChange={changeHandler}\r\n            {...(errors.phone && {error:true,helperText:errors.phone})}\r\n            fullWidth></TextField>\r\n\r\n            <TextField name=\"email\"\r\n            variant=\"outlined\"\r\n            label=\"Email\"\r\n            className={classes.text}\r\n            value={values.email}\r\n            onChange={changeHandler}\r\n            {...(errors.email && {error:true,helperText:errors.email})}\r\n            fullWidth></TextField>\r\n\r\n            <TextField name=\"address\"\r\n            variant=\"outlined\"\r\n            label=\"Address\"\r\n            multiline\r\n            rows={2}\r\n            className={classes.text} \r\n            value={values.address}\r\n            onChange={changeHandler}\r\n            fullWidth></TextField>\r\n            <Grid container>\r\n                <Grid item xs></Grid>\r\n                <Grid item>\r\n                <Button\r\n            variant=\"contained\" color=\"primary\"\r\n            type=\"submit\"\r\n            >{btn}\r\n            </Button>\r\n                </Grid>\r\n            </Grid>\r\n            \r\n        </form>\r\n        </Paper>\r\n        </Modal>\r\n        \r\n        <Paper elevation={0} style={{marginTop:\"13px\"}}>\r\n            <Grid container>\r\n                <Grid item xs></Grid>\r\n                <Grid item>\r\n                <Button \r\n                variant=\"outlined\"\r\n                onClick={() => setOpenIn(true)}>\r\n\r\n                ADD new Contact\r\n            </Button>\r\n                </Grid>\r\n            </Grid>\r\n           \r\n        </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state =>( {\r\n    postContactList: state.postContact.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n   createPostContacts :actions.create,\r\n   updatePostContact: actions.update\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(PostContactForm);","import { Table ,TableCell,TableContainer, TableHead, TableRow,Paper, withStyles, TableBody, IconButton, Button} from '@material-ui/core';\r\nimport React,{Fragment, useEffect,useState} from 'react';\r\nimport ChapterDetailsForm from './ChapterDetailsForm'\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions/postContact';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PostContactForm from './PostContactForm';\r\nimport ButterToast, { Cinnamon } from \"butter-toast\";\r\nimport { DeleteSweep } from \"@material-ui/icons\";\r\nimport { json } from 'body-parser';\r\nconst parseJson = require('parse-json');\r\n\r\n\r\nconst styles = theme => ({\r\n    table:{\r\n        margin:'16px 0'\r\n    }\r\n})\r\n\r\n\r\nconst PostContact = ({classes, ...props}) => {\r\n    const [currentId,setCurrentId] = useState(0)\r\n  \r\n    const [chaterId,setChapterId] = useState(0)\r\n\r\n    const chapterhandler = (id) => {\r\n        setChapterId(id)\r\n        console.log(id)\r\n    }\r\n\r\n    const onDelete = id => {\r\n        const onSuccess = () => {\r\n            ButterToast.raise({\r\n                content: <Cinnamon.Crisp title=\"Done\"\r\n                    content=\"Deleted successfully\"\r\n                    scheme={Cinnamon.Crisp.SCHEME_PURPLE}\r\n                    icon={<DeleteSweep />}\r\n                />\r\n            })\r\n        }\r\n        if (window.confirm('Are you sure to delete this record?'))\r\n            props.deletePostContact(id,onSuccess)\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        props.fetchAllPostContacts()\r\n    },[])\r\n    return (\r\n    <Fragment>\r\n       \r\n        {/* <PostContactForm {...{currentId,setCurrentId}}/> */}\r\n        <ChapterDetailsForm {...{chaterId,setChapterId}} />\r\n        <TableContainer component={Paper} className={classes.table}>\r\n            <Table arial-label='simple table' >\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                               Chapter Name\r\n                        </TableCell>\r\n                        <TableCell align='right'>\r\n                            City\r\n                        </TableCell>\r\n                        <TableCell align='right'>\r\n                            Area\r\n                        </TableCell>\r\n                        <TableCell align='right'>\r\n                            Meeting Day\r\n                        </TableCell>\r\n                        <TableCell align='right'>\r\n                            Details\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    \r\n                    {\r\n                    props.postContactList.map((contact,index) =>(\r\n                        <TableRow key={index}>\r\n                            <TableCell>\r\n                                {contact.ChapterName}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                \r\n                                {contact.City}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                {contact.Area}\r\n                                {console.log(typeof(contact.ChapterDetails))}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                {contact.MeetDay}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Button variant=\"outlined\" color=\"secondary\"  size=\"small\" \r\n                                onClick = {() => chapterhandler(contact._id)} >Know More</Button>\r\n                           \r\n                            </TableCell>\r\n                            {/* <IconButton color='primary' onClick={() => setCurrentId(contact._id)}>\r\n                                    <EditIcon  />\r\n                                </IconButton>\r\n                                <IconButton color='secondary' onClick={() => onDelete(contact._id)}>\r\n                                    <DeleteOutlineIcon />\r\n                                </IconButton> */}\r\n                        </TableRow>\r\n                    ))\r\n                     \r\n                    }\r\n                </TableBody>\r\n\r\n            </Table>\r\n\r\n        </TableContainer>\r\n        </Fragment>\r\n    \r\n    )\r\n}\r\nconst mapStateToProps = state =>( {\r\n     postContactList: state.postContact.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n    fetchAllPostContacts :actions.fetchAll,\r\n    deletePostContact: actions.Delete\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostContact));","import {ACTION_TYPES} from '../actions/postContact';\r\n\r\nconst initialState = {\r\n    list:[]\r\n}\r\n\r\nexport const postContact = (state = initialState , action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.FETCH_ALL:\r\n            return {\r\n                ...state,\r\n                list:[...action.payload]\r\n            }\r\n\r\n            case ACTION_TYPES.CREATE:\r\n                return {\r\n                    ...state,\r\n                    list: [...state.list, action.payload]\r\n                }\r\n            case ACTION_TYPES.UPDATE:\r\n                return {\r\n                    ...state,\r\n                    list: state.list.map(x => x._id === action.payload._id ? action.payload : x)\r\n                }\r\n    \r\n            case ACTION_TYPES.DELETE:\r\n                return {\r\n                    ...state,\r\n                    list:state.list.filter(x => x._id !== action.payload)\r\n                }\r\n        \r\n    \r\n        default:\r\n            return state;\r\n    } \r\n}","import {combineReducers} from 'redux';\r\nimport { postContact } from './postContact';\r\n\r\nexport const reducers = combineReducers({\r\n    postContact\r\n})","import {createStore,applyMiddleware,compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {reducers} from '../reducers/index'\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    compose(applyMiddleware(thunk),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n)","import React from \"react\";\r\n\r\nimport {withStyles} from '@material-ui/core';\r\n\r\nconst style = {\r\n    sidemenu:{\r\n            display:'flex',\r\n            flexDirection:'column',\r\n            position:'fixed',\r\n            left:'0',\r\n            width:'20px',\r\n            backgroundColor:'#726a95',\r\n            height:'100%',\r\n            boxShadow:\" 10px 5px 10px #aaaaaa\",\r\n    }\r\n}\r\n  \r\n const SideMenu = (props) => {\r\n     const {classes} = props;\r\n    //  console.log(props)\r\n    return( <div className={classes.sidemenu}>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default withStyles(style)(SideMenu);","import { AppBar, Grid, IconButton, Toolbar, makeStyles } from '@material-ui/core';\r\nimport React, { Fragment } from 'react';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\n\r\nconst useStyles = makeStyles({\r\n    root:{\r\n        backgroundColor:'#fff'\r\n    }\r\n})\r\n\r\n\r\nexport default function Header(){\r\n    const classes = useStyles();\r\n    return (\r\n        <Fragment>\r\n            <AppBar position='sticky' className={classes.root}>\r\n                <Toolbar>\r\n                    <Grid container>\r\n                        <Grid item >\r\n                            <Grid container>\r\n                                <Grid item>\r\n                                <PeopleIcon style={{color:'#686d76',margin:'15px 10px 0 0'}} fontSize='large'/>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                <h3 style={{color:'#8675a9'}}>   \r\n                                Contacts\r\n                            </h3>       \r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                        </Grid>\r\n                        <Grid item style={{paddingTop:'8px'}}>\r\n                            <IconButton >\r\n                                <Badge badgeContent={8} color=\"secondary\" >\r\n                                    <NotificationsIcon  />\r\n                                </Badge>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Badge badgeContent={7} color=\"secondary\" >\r\n                                    <ChatIcon  />\r\n                                </Badge>\r\n                            </IconButton>\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Fragment>\r\n\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport PostContact from './components/PostContact';\nimport { Provider } from 'react-redux';\nimport {store} from \"./actions/store\";\nimport SideMenu from './components/comp/sidemenu';\nimport {  Container} from '@material-ui/core';\nimport Header from './components/comp/header';\nimport ButterToast,{POS_TOP,POS_RIGHT} from 'butter-toast'; \n\n\n\nfunction App() {\n \n  return (\n    <Provider store={store}>\n        <SideMenu />\n        <Container maxWidth='lg' >\n          <Header />\n          {/* <PostContactForm/> */}\n         <PostContact />\n         <ButterToast position={{vertical:POS_TOP,horizontal:POS_RIGHT}} />\n         {/* <Edit /> */}\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}